// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sapnil.Models;

namespace Sapnil.Migrations
{
    [DbContext(typeof(SapnilContext))]
    [Migration("20191110100956_Initials")]
    partial class Initials
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Sapnil.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("CellNo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(11);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("InvoiceNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Sapnil.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DueAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Sapnil.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactLense")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ContactLensePrice")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("ContactLenseQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FocalOption")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrameName")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FramePrice")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("FrameQty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftEyeAdd")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeftEyeAxis")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeftEyeCyl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeftEyeSph")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PowerLense")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PowerLensePrice")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("PowerLenseQty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightEyeAdd")
                        .HasColumnType("TEXT");

                    b.Property<string>("RightEyeAxis")
                        .HasColumnType("TEXT");

                    b.Property<string>("RightEyeCyl")
                        .HasColumnType("TEXT");

                    b.Property<string>("RightEyeSph")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sapnil.Models.Payment", b =>
                {
                    b.HasOne("Sapnil.Models.Customer", "Customer")
                        .WithOne("Payment")
                        .HasForeignKey("Sapnil.Models.Payment", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sapnil.Models.Product", b =>
                {
                    b.HasOne("Sapnil.Models.Customer", "Customer")
                        .WithOne("Product")
                        .HasForeignKey("Sapnil.Models.Product", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
